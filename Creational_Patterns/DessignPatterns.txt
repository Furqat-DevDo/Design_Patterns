Design patterns are typical solutions to commonly occurring problems in software design.
They are like pre-made blueprints that you can customize to solve a recurring design problem in your code.

What does the pattern consist of?
Most patterns are described very formally so people can reproduce them in many contexts. 
Here are the sections that are usually present in a pattern description:
• Intent of the pattern briefly describes both the problem and
the solution.
• Motivation further explains the problem and the solution the
pattern makes possible.
• Structure of classes shows each part of the pattern and how
they are related.
• Code example in one of the popular programming languages
makes it easier to grasp the idea behind the pattern.

Some pattern catalogs list other useful details, such as applicability of the pattern, 
implementation steps and relations with other patterns.

Category of design patterns :
• Creational patterns provide object creation mechanisms that
increase flexibility and reuse of existing code.
• Structural patterns explain how to assemble objects and classes into larger structures, 
while keeping the structures flexible and efficient.
• Behavioral patterns take care of effective communication and the assignment of responsibilities between objects.

Conclusion of patterns :
• Design patterns are a toolkit of tried and tested solutions to common problems in software design. 
Even if you never encounter these problems, knowing patterns is still useful
because it teaches you how to solve all sorts of problems using
principles of object-oriented design.
• Design patterns define a common language that you and your teammates can use to communicate more efficiently. 
You can say, “Oh, just use a Singleton for that,” and everyone will understand the idea behind your suggestion. 
No need to explain what a singleton is if you know the pattern and its name.
